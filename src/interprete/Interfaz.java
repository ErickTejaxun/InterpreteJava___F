/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interprete;

import Utilidades.ErrorC;
import AST.Entorno.Entorno;
import AST.Instruccion.Instruccion;
import AST.Entorno.Simbolo;
import AST.AST;
import AST.Nodo;
import Analisis.*;
import Analisis.Grafica.dibujador;
import Analisis.Grafica.parserReporte;
import Analisis.Grafica.scannerReporte;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Scanner;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.Highlighter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.fife.ui.rtextarea.*;
import org.fife.ui.rsyntaxtextarea.*;
import org.fife.ui.autocomplete.*;


/**
 *
 * @author erick
 */
public class Interfaz extends javax.swing.JFrame implements Runnable{

    public int contadorNuevos=1;
    public Hashtable<String,String> archivos  = new Hashtable<>();
    public Hashtable<String,String> direcciones  = new Hashtable<>();        
    public String raizActual = getPathActual();
    public ArrayList<ErrorC> listaErrores = new ArrayList();
    scanner lexico;    
    parser sintactico;    
    ArrayList<ErrorC> todosErrores= new ArrayList();    
    public String salida = "";
    public String fechaHora = "";
    String pathProyectos = "C:\\Users\\erick\\Desktop\\Java";
    public Entorno entornoGlobal;
    DefaultCompletionProvider provider;
    boolean seguirHilo=false;
    boolean hiloIniciado=false;
    Thread hilo;
    int cont=0;
    public Hashtable<String, RSyntaxTextArea> tablaEditores = new Hashtable<>();
    
    
    /**
     * Creates new form interfaz
     */
    public Interfaz() 
    {
        initComponents(); 
        arbolDirectorio.setModel(new DefaultTreeModel(new DefaultMutableTreeNode()));
//        DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
//        DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
//        root.removeAllChildren();
//        model.reload(root); 

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelEditor = new javax.swing.JPanel();
        panelDirectorio = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        arbolDirectorio = new javax.swing.JTree();
        panelEdicion = new javax.swing.JPanel();
        textoBusqueda = new javax.swing.JTextField();
        botonBuscar = new javax.swing.JButton();
        contenedorPaneles = new javax.swing.JTabbedPane();
        botonCompilar = new javax.swing.JButton();
        textoRemplazar = new javax.swing.JTextField();
        botonRemplazar = new javax.swing.JButton();
        botonRemplazar1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        botonCompilar1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        slideVelocidad = new javax.swing.JSlider();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelReporte = new javax.swing.JPanel();
        labelReporte = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaErrores = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        reporteCompilacion = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textAreaConsola = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabladeSimbolos = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        abrirCarpeta = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        menuGuardar = new javax.swing.JMenuItem();
        guardarComo = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        menuEjecucion = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        panelEditor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        panelDirectorio.setBackground(new java.awt.Color(153, 255, 51));
        panelDirectorio.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        arbolDirectorio.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                arbolDirectorioValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(arbolDirectorio);

        javax.swing.GroupLayout panelDirectorioLayout = new javax.swing.GroupLayout(panelDirectorio);
        panelDirectorio.setLayout(panelDirectorioLayout);
        panelDirectorioLayout.setHorizontalGroup(
            panelDirectorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDirectorioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelDirectorioLayout.setVerticalGroup(
            panelDirectorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDirectorioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelEdicion.setBackground(new java.awt.Color(204, 204, 255));

        botonBuscar.setText("Buscar");
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        botonCompilar.setText("Compilar");
        botonCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCompilarActionPerformed(evt);
            }
        });

        botonRemplazar.setText("Todos");
        botonRemplazar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRemplazarActionPerformed(evt);
            }
        });

        botonRemplazar1.setText("Siguiente");
        botonRemplazar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRemplazar1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Remplazar");

        botonCompilar1.setText("Debug");
        botonCompilar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCompilar1ActionPerformed(evt);
            }
        });

        jButton1.setText("Next");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Pausar");

        jButton3.setText("Continuar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelEdicionLayout = new javax.swing.GroupLayout(panelEdicion);
        panelEdicion.setLayout(panelEdicionLayout);
        panelEdicionLayout.setHorizontalGroup(
            panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenedorPaneles)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEdicionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(botonCompilar, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(botonCompilar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEdicionLayout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEdicionLayout.createSequentialGroup()
                        .addComponent(slideVelocidad, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)))
                .addGap(9, 9, 9)
                .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelEdicionLayout.createSequentialGroup()
                        .addComponent(textoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelEdicionLayout.createSequentialGroup()
                        .addComponent(textoRemplazar, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonRemplazar1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonRemplazar, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelEdicionLayout.setVerticalGroup(
            panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEdicionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(textoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botonCompilar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(slideVelocidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textoRemplazar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonRemplazar1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonRemplazar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonCompilar1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contenedorPaneles)
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(204, 255, 102));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        labelReporte.setBackground(new java.awt.Color(255, 0, 51));
        labelReporte.setForeground(new java.awt.Color(0, 102, 102));
        labelReporte.setText("jLabel2");

        javax.swing.GroupLayout panelReporteLayout = new javax.swing.GroupLayout(panelReporte);
        panelReporte.setLayout(panelReporteLayout);
        panelReporteLayout.setHorizontalGroup(
            panelReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1207, Short.MAX_VALUE)
            .addGroup(panelReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelReporteLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(labelReporte, javax.swing.GroupLayout.DEFAULT_SIZE, 1187, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        panelReporteLayout.setVerticalGroup(
            panelReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 316, Short.MAX_VALUE)
            .addGroup(panelReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelReporteLayout.createSequentialGroup()
                    .addGap(0, 22, Short.MAX_VALUE)
                    .addComponent(labelReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabbedPane1.addTab("Reportes", panelReporte);

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.Y_AXIS));

        tablaErrores.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        tablaErrores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Descripción", "Linea", "Columna", "Tipo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaErrores);

        jPanel3.add(jScrollPane2);

        reporteCompilacion.setBackground(new java.awt.Color(0, 0, 0));
        reporteCompilacion.setColumns(20);
        reporteCompilacion.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        reporteCompilacion.setForeground(new java.awt.Color(255, 255, 255));
        reporteCompilacion.setRows(5);
        jScrollPane5.setViewportView(reporteCompilacion);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1187, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel6);

        jTabbedPane1.addTab("Errores", jPanel3);

        textAreaConsola.setBackground(new java.awt.Color(0, 0, 0));
        textAreaConsola.setColumns(20);
        textAreaConsola.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        textAreaConsola.setForeground(new java.awt.Color(255, 255, 255));
        textAreaConsola.setRows(5);
        jScrollPane4.setViewportView(textAreaConsola);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1187, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Consola", jPanel4);

        tabladeSimbolos.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        tabladeSimbolos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tabladeSimbolos);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1197, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Tabla de Símbolos", jPanel5);

        jPanel1.add(jTabbedPane1);

        javax.swing.GroupLayout panelEditorLayout = new javax.swing.GroupLayout(panelEditor);
        panelEditor.setLayout(panelEditorLayout);
        panelEditorLayout.setHorizontalGroup(
            panelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEditorLayout.createSequentialGroup()
                .addComponent(panelDirectorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelEdicion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelEditorLayout.setVerticalGroup(
            panelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEditorLayout.createSequentialGroup()
                .addGroup(panelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelEdicion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelDirectorio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(panelEditor);

        menuArchivo.setText("Archivo");

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem9.setText("Abrir");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        menuArchivo.add(jMenuItem9);

        abrirCarpeta.setText("Abrir Carpeta");
        abrirCarpeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirCarpetaActionPerformed(evt);
            }
        });
        menuArchivo.add(abrirCarpeta);

        jMenuItem1.setText("Nuevo Archivo (nueva Tab)");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuArchivo.add(jMenuItem1);

        jMenuItem2.setText("Nueva Carpeta");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        menuArchivo.add(jMenuItem2);

        menuGuardar.setText("Guardar");
        menuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(menuGuardar);

        guardarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        guardarComo.setText("Guardar como");
        guardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarComoActionPerformed(evt);
            }
        });
        menuArchivo.add(guardarComo);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Cerrar (tab Actual)");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        menuArchivo.add(jMenuItem4);

        jMenuItem5.setText("Salir");
        menuArchivo.add(jMenuItem5);

        jMenuBar1.add(menuArchivo);

        menuEjecucion.setText("Depurar");

        jMenuItem6.setText("Iniciar");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        menuEjecucion.add(jMenuItem6);

        jMenuItem7.setText("Siguiente Paso");
        menuEjecucion.add(jMenuItem7);

        jMenuItem8.setText("Terminar Todo");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        menuEjecucion.add(jMenuItem8);

        jMenuBar1.add(menuEjecucion);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        nuevoArchivo();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        nuevaCarpeta();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void arbolDirectorioValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_arbolDirectorioValueChanged
        try 
        {
            abrirDesdeArbol();
        } 
        catch (Exception e) 
        {
        }
    }//GEN-LAST:event_arbolDirectorioValueChanged

    private void guardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarComoActionPerformed
        try {
            guardarArchivoNuevo();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_guardarComoActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        try {
            cerrarActual();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        try 
        {
            abrirArchivo();
        } 
        catch (FileNotFoundException ex) 
        {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void botonCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCompilarActionPerformed
       iniciarHilo();
       Utilidades.Singlenton.breakPoints.clear();
       Utilidades.Singlenton.puntos.clear();
       slideVelocidad.setValue(0);
       if(seguirHilo)
       {
           pararHIlo(false);
           //jbLanzarHilo.setText("Reanudar hilo");
       }else
       {
           pararHIlo(true);
           //jbLanzarHilo.setText("Detener hilo");
       }         
    }//GEN-LAST:event_botonCompilarActionPerformed

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
        buscar();
    }//GEN-LAST:event_botonBuscarActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        abrirAST();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed

       
        
        
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void abrirCarpetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirCarpetaActionPerformed
        try {
            abrirCarpeta();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_abrirCarpetaActionPerformed

    private void botonRemplazarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRemplazarActionPerformed
        remplazar(1);
    }//GEN-LAST:event_botonRemplazarActionPerformed

    private void botonRemplazar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRemplazar1ActionPerformed
        remplazar(0);
    }//GEN-LAST:event_botonRemplazar1ActionPerformed

    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed
        try {
            save();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuGuardarActionPerformed

    private void botonCompilar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCompilar1ActionPerformed
        // TODO add your handling code here:
        iniciarDepuracion();
        iniciarHilo();
        if(seguirHilo)
        {
            pararHIlo(false);        
        }else
        {
            pararHIlo(true);        
        }
    }//GEN-LAST:event_botonCompilar1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                 iniciarHilo();
            if(seguirHilo){
                pararHIlo(false);
                //jbLanzarHilo.setText("Reanudar hilo");
            }else{
                pararHIlo(true);
                //jbLanzarHilo.setText("Detener hilo");
            }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Utilidades.Singlenton.continuarEjecucion = true;
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    public void abrirArchivo() throws FileNotFoundException
    {

        String path = "";
        String nombreArchivo ="";
        JFileChooser file=new JFileChooser(pathProyectos);        
        file.showOpenDialog(this);
        /**abrimos el archivo seleccionado*/
        File eleccion=file.getSelectedFile();
        if(eleccion!=null)
        {
            path =eleccion.getPath();            
            StringTokenizer token = new StringTokenizer(path,"\\");
            String nombre = "";
            while(token.hasMoreTokens())
            {
                nombre = token.nextToken();
            }
            nombreArchivo = nombre;  
            direcciones.put(nombreArchivo,path);  //  Guardamos <nombre, dirccion>
        }  
        if(eleccion==null){return;}
        
        
        File archivo= new File(path); 
        Scanner sc = new Scanner(archivo); 
        String data = "";
        while (sc.hasNextLine())
        {
            if(data.equals(""))
            {
                data = sc.nextLine();
            }
            else
            {
                data = data + "\n" + sc.nextLine();
            }
        }        
        nuevoArchivoConData(nombreArchivo, data);                
    }
    
    public void actualizarSalida()
    {
        textAreaConsola.setText(salida);
    }
    
    
    public void abrirCarpeta() throws FileNotFoundException
    {

        String path = "";
        String nombreCarpeta ="";
        JFileChooser file=new JFileChooser(PathActual()+"\\Proyectos");      
        file.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        file.showOpenDialog(this);
        /**abrimos el archivo seleccionado*/
        File eleccion=file.getSelectedFile();
        if(eleccion!=null)
        {
            path =eleccion.getPath();            
        }  
        if(eleccion==null){return;}
        
        File aDirectory = new File(path);        
        String[] filesInDir = aDirectory.list();
        for ( int i=0; i<filesInDir.length; i++ )
        {            
            if(filesInDir[i].contains(".d++")||filesInDir[i].contains(".djs")||filesInDir[i].contains(".dasm"))
            {
                direcciones.put(filesInDir[i],path+"\\"+filesInDir[i]);
            }
        }        
        
        System.out.println(direcciones.toString());
        //nuevoArchivoConData(nombreCarpeta, data);                
    }    
    
    public void abrirDesdeArbol()
    {
            TreePath[] paths = arbolDirectorio.getSelectionPaths();
            String nombre = "";
            int ubicacion = 666;
            for (TreePath path : paths) 
            {                
                nombre = path.getLastPathComponent().toString();
            }
            
            for(int posicion = 0; posicion<contenedorPaneles.getTabCount();posicion++)
            {
                if(nombre.equals(contenedorPaneles.getTitleAt(posicion)))
                {
                    ubicacion = posicion;
                    break;
                }
            }
            if(ubicacion!=666)
            {                
                contenedorPaneles.setSelectedIndex(ubicacion);                
            }
            String tipo = archivos.get(nombre);
            if(tipo.equals("carpeta"))
            {
                raizActual= nombre;
            }
            else
            {
                raizActual = getPathActual();
            }        
    }
    
 
    //Este metodo creará una nuevo panel con su editor en blanco.
    public void nuevoArchivo()
    {

            JPanel panel = new JPanel();
            panel.setLayout(new java.awt.BorderLayout());
            RSyntaxTextArea editor = new RSyntaxTextArea(30,60);
            editor.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
            editor.setCodeFoldingEnabled(true);            
            RTextScrollPane sp = new RTextScrollPane(editor);            
            sp.setIconRowHeaderEnabled(true);
                                                
            Gutter gutter = sp.getGutter();                                
            gutter.setBookmarkIcon(new ImageIcon(getClass().getResource("/breakpoint.png")));            
            gutter.setBookmarkingEnabled(true);
            
            CompletionProvider provider = createCompletionProvider();
            AutoCompletion ac = new AutoCompletion(provider);
            ac.install(editor);            
            panel.add(sp);    
            contenedorPaneles.add("Nuevo-"+contadorNuevos, panel);                        
            agregarArbolGrafico("Nuevo-"+contadorNuevos);
            contadorNuevos++;            

    }
    
    
    public void nuevoArchivoConData(String nombre, String data)
    {

            JPanel panel = new JPanel();
            panel.setLayout(new java.awt.BorderLayout());
            RSyntaxTextArea editor = new RSyntaxTextArea(30,60);              
            tablaEditores.put(nombre, editor);
            editor.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
            //editor.setCodeFoldingEnabled(true);
            RTextScrollPane sp = new RTextScrollPane(editor);            
            sp.setIconRowHeaderEnabled(true);
                                                
            Gutter gutter = sp.getGutter();                                
            gutter.setBookmarkIcon(new ImageIcon(getClass().getResource("/breakpoint.png")));            
            gutter.setBookmarkingEnabled(true);        
            editor.setText(data);                 
            
            
            CompletionProvider provider = createCompletionProvider();
            AutoCompletion ac = new AutoCompletion(provider);
            ac.install(editor);
            panel.add(sp);    
            contenedorPaneles.add(nombre, panel);                        
            agregarArbolGrafico(nombre);
            //contadorNuevos++;            

    }    
    
    public void agregarArbolGrafico(String nombre)
    {
        DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();        
        if(raizActual.equals(getPathActual()))
        {
            root.add(new DefaultMutableTreeNode(nombre));    
            //direcciones.put(nombre,getPathActual());
        }
        else
        {                            
           for(int contador = 0 ; contador<root.getChildCount(); contador ++)
           {
               if(root.getChildAt(contador).toString().equals(raizActual))
               {
                   DefaultMutableTreeNode nodo = (DefaultMutableTreeNode) root.getChildAt(contador); 
                   nodo.add(new DefaultMutableTreeNode(nombre));
                   //direcciones.put(nombre,direcciones.get(raizActual));
               }
           }
        }
        model.reload(root);            
        archivos.put(nombre, "archivo");        

    }
    
    public void nuevaCarpeta()
    {
        String path = "";
        String nombreCarpeta ="";
        JFileChooser file=new JFileChooser(PathActual()+"\\Proyectos");
        file.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        file.showOpenDialog(this);
        /**abrimos el archivo seleccionado*/
        File eleccion=file.getSelectedFile();
        if(eleccion!=null)
        {
            path =eleccion.getPath();            
            StringTokenizer token = new StringTokenizer(eleccion.getPath(),"\\");
            String nombre = "";
            while(token.hasMoreTokens())
            {
                nombre = token.nextToken();
            }
            nombreCarpeta = nombre;  
            direcciones.put(nombreCarpeta,path);
        }        
        
        if(!nombreCarpeta.equals(getPathActual()))
        {        
            //String nombreCarpeta  = JOptionPane.showInputDialog("Nombre de la nueva carpeta");
            DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
            root.add(new DefaultMutableTreeNode(nombreCarpeta));
            model.reload(root);             
            archivos.put(nombreCarpeta, "carpeta");
        }
    }
    
    
    public String getPathActual(){
        String path="";
         File miDir = new File (".");
         try {
           //System.out.println (miDir.getCanonicalPath());
           path=miDir.getCanonicalPath();
         }
         catch(Exception e) 
         {
           e.printStackTrace();
         }
         return path+"\\Proyectos";
    }      
    
    public void guardarArchivoNuevo() throws FileNotFoundException
    {        
        String tipo = ".java";       
        /*
        String[] options = {".gcc", ".3d","cancelar"};
        int x = -1;
        
        while(x==-1)
        {
            x=JOptionPane.showOptionDialog(null, "Seleccion el tipo de archivo a guardar.",
                "Haga click en el botón",
                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);            
        }
        if(x==2){return;}
        tipo = options[x];

        
        if(tipo.equals("1")){tipo=".gcc";}
        if(tipo.equals("2")){tipo=".3d";}        
        */
        String seleccionado = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String directorio=direcciones.get(seleccionado); 
        /*File chooser*/
        JFileChooser chooser;
        chooser = new JFileChooser(); 
        chooser.setCurrentDirectory(new java.io.File("C:\\Users\\erick\\Desktop"));
        String choosertitle = null;
        chooser.setDialogTitle(choosertitle);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);        
        chooser.setAcceptAllFileFilterUsed(false);
        //    
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) 
        { 
          directorio = chooser.getSelectedFile().toString();
        }
        else 
        {
          return;
        }
        
        /*Ahora pedimos el nombre*/        
        String texto = "";
        String nombre = "";
        while(nombre.trim().equals(""))
        {
            nombre = JOptionPane.showInputDialog("Nombre con el que se guardará el nuevo archivo.");
        }
        nombre += tipo;
        
        if(directorio==null){directorio= pathProyectos+"\\"+nombre;}
        else{directorio= directorio+"\\"+nombre;}
        File archivo=new File(directorio);
        try (PrintWriter writer = new PrintWriter(archivo)) 
        {
            JPanel temporal = (JPanel) contenedorPaneles.getComponent(contenedorPaneles.getSelectedIndex());
            RTextScrollPane scroll = (RTextScrollPane)temporal.getComponent(0);
            JTextArea editor =  scroll.getTextArea();//(RSyntaxTextArea)scroll.getComponent(0);
            texto = editor.getText();
            //System.out.println(textoBuscado);
            writer.print(texto);
        }        
        direcciones.put(nombre,directorio);
        ActualizarNombres(seleccionado,nombre);
        
    }
    
    public void guardarArchivoNuevoSinGrafo(boolean compilar) 
    {
        int opcion = JOptionPane.showConfirmDialog(this, "¿Desea guardar los cambios?");
        if(opcion ==1)
        {
            return;
        }
        String seleccionado = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String directorio=direcciones.get(seleccionado);                
        String texto = "";
        String nombre = "";
        while(nombre.trim().equals(""))
        {
            nombre = JOptionPane.showInputDialog("Nombre con el que se guardará el nuevo archivo.");
        }
        if(!compilar){quitarNodo(seleccionado);}
        File archivo=new File(pathProyectos+"\\"+nombre+".gcc");
        try (PrintWriter writer = new PrintWriter(archivo)) 
        {
            JPanel temporal = (JPanel) contenedorPaneles.getComponent(contenedorPaneles.getSelectedIndex());
            RTextScrollPane scroll = (RTextScrollPane)temporal.getComponent(0);
            JTextArea editor =  scroll.getTextArea();
            texto = editor.getText();            
            writer.print(texto);
        } catch (FileNotFoundException ex) 
        {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }                       
    }    
    
    
    public void save() throws FileNotFoundException
    {        
        String seleccionado = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String directorio=direcciones.get(seleccionado);  
        if(directorio!=null)
        {
            guardarArchivo();   
        }        
        else
        {
            guardarArchivoNuevo();
        }        
    }    
    
    public void guardarArchivo() throws FileNotFoundException
    {
        String seleccionado = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String directorio=direcciones.get(seleccionado);                
        String texto = "";
        String nombre = "";
        nombre = seleccionado;
        File archivo=new File(directorio);
        try (PrintWriter writer = new PrintWriter(archivo)) 
        {
            JPanel temporal = (JPanel) contenedorPaneles.getComponent(contenedorPaneles.getSelectedIndex());
            RTextScrollPane scroll = (RTextScrollPane)temporal.getComponent(0);
            JTextArea editor =  scroll.getTextArea();//(RSyntaxTextArea)scroll.getComponent(0);
            texto = editor.getText();
            //System.out.println(textoBuscado);
            writer.print(texto);
            writer.close();
        } 
        
        ActualizarNombres(seleccionado,nombre);        
    }  
    
    public void guardarArchivoSinGrafo(boolean compilar) 
    {
        String seleccionado = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String directorio=direcciones.get(seleccionado);                
        String texto = "";
        String nombre = "";
        nombre = seleccionado;
        File archivo=new File(directorio);
        try (PrintWriter writer = new PrintWriter(archivo)) 
        {
            JPanel temporal = (JPanel) contenedorPaneles.getComponent(contenedorPaneles.getSelectedIndex());
            RTextScrollPane scroll = (RTextScrollPane)temporal.getComponent(0);
            JTextArea editor =  scroll.getTextArea();//(RSyntaxTextArea)scroll.getComponent(0);
            texto = editor.getText();
            //System.out.println(textoBuscado);
            writer.print(texto);
            writer.close();
        } catch (FileNotFoundException ex) 
        {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(!compilar){quitarNodo(seleccionado);}
        
        //ActualizarNombres(seleccionado,nombre+".d++");
        
    }    
    
    
    
    
    
    public void quitarNodo(String actual)
    {
        DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
        qNodo(root, actual);
        model.reload(root);  
    }
    
    public void qNodo(DefaultMutableTreeNode root, String actual)
    {                                          
       for(int contador = 0 ; contador<root.getChildCount(); contador ++)
       {
           if(root.getChildAt(contador).toString().equals(actual))
           {               
               root.remove(contador);               
               break;
           }
           else
           {
               qNodo((DefaultMutableTreeNode) root.getChildAt(contador), actual);
           }
       }                              
    }
    
    
    public void ActualizarNombres(String actual, String nuevo)
    {
        DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();        
                           
       for(int contador = 0 ; contador<root.getChildCount(); contador ++)
       {
           if(root.getChildAt(contador).toString().equals(actual))
           {
               root.remove(contador);
               root.insert(new DefaultMutableTreeNode(nuevo), contador);               
               break;
           }
       }        
        model.reload(root);            
        archivos.put(nuevo, archivos.get(actual)); 
        String direccion  = direcciones.get(actual);
        if(direccion==null){direccion = pathProyectos+"\\"+nuevo;}
        direcciones.put(nuevo, direccion);        
        contenedorPaneles.setTitleAt(contenedorPaneles.getSelectedIndex(), nuevo);        
    }
    
    
    public void cerrarActual() throws FileNotFoundException
    {        
        String actual = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String[] partes = actual.split("\\.");
        if(partes.length==2)
        {
            guardarArchivoSinGrafo(false);
        }
        else
        {
            guardarArchivoNuevoSinGrafo(false);
        }
        DefaultTreeModel model = (DefaultTreeModel)arbolDirectorio.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();        
                           
       for(int contador = 0 ; contador<root.getChildCount(); contador ++)
       {
           if(root.getChildAt(contador).toString().equals(actual))
           {               
               root.remove(contador);
               break;
           }
       }        
        model.reload(root);            
        archivos.remove(actual);
        direcciones.remove(actual);
        contenedorPaneles.remove(contenedorPaneles.getSelectedIndex());
    }


    public void mostrarErrores(ArrayList<ErrorC> errores)
    {
        DefaultTableModel filasErrores = new DefaultTableModel();        
        filasErrores.addColumn("Archivo");        
        filasErrores.addColumn("Id");
        filasErrores.addColumn("Descripción");
        filasErrores.addColumn("Linea"); 
        filasErrores.addColumn("Columna");                 
        filasErrores.addColumn("Tipo");                 
        tablaErrores.setModel(filasErrores);        
                
        errores.forEach((error) -> 
        {
            filasErrores.addRow(new Object[]
            {raizActual,
                error.getTipo(),
                error.getDescripcion(),
                error.getLinea(),
                error.getColumna(),
                error.getTipo()}                    
            );
        });                       
    }
    
    
    public void mostrarErrores()
    {
        DefaultTableModel filasErrores = new DefaultTableModel();        
        filasErrores.addColumn("Archivo");        
        filasErrores.addColumn("Id");
        filasErrores.addColumn("Descripción");
        filasErrores.addColumn("Linea"); 
        filasErrores.addColumn("Columna");                 
        filasErrores.addColumn("Tipo");                 
        tablaErrores.setModel(filasErrores);        
                
        Utilidades.Singlenton.listaErrores.forEach((error) -> 
        {
            filasErrores.addRow(new Object[]
            {raizActual,
                error.id,
                error.getDescripcion(),
                error.getLinea(),
                error.getColumna(),
                error.getTipo()}                    
            );
        });                       
    }    
    
    public void agregarError(ErrorC.TipoError tipo, String descripcion, int linea, int columna)
    {
        listaErrores.add(new ErrorC(tipo, descripcion, linea, columna));        
        DefaultTableModel filasErrores =(DefaultTableModel) tablaErrores.getModel();  
        filasErrores.addRow(new Object[]{raizActual,"", descripcion, linea, columna , tipo} );
        
    }
    
    public void compilar() 
    {
        /*Limpiar consola de salida*/
        textAreaConsola.setText("");
        Utilidades.Singlenton.listaErrores.clear();
        Utilidades.Singlenton.pilaArchivos.clear();
	DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
	Date date = new Date();        
        fechaHora = dateFormat.format(date);
        todosErrores.clear();
        if(lexico!=null && sintactico!=null)
        {
            lexico.listaErrores.clear();
            sintactico.listaErrores.clear();
        }               
        /*Guardar-------*/
        if(contenedorPaneles.getTabRunCount()==0)
        {
            JOptionPane.showMessageDialog(this, "Debe abrir un archivo.");
            return;
        }
        String actual = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());                
        if(actual.contains("."))
        {
            guardarArchivoSinGrafo(true);
        }
        else
        {
            guardarArchivoNuevoSinGrafo(true);
        }   
        /*Fin Guardar*------------*/
        
        String nombreArchivo = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
        String pathArchivo = direcciones.get(nombreArchivo);
        if(actual.contains("."))
        {
            try 
            { 
                Utilidades.Singlenton.pilaArchivos.add(pathArchivo);                
                lexico=new scanner(new java.io.FileReader(pathArchivo));                                             
                sintactico = new parser(lexico);                              
                sintactico.parse();         
            } 
            catch (Exception ex) 
            {
                System.out.println(ex.getMessage());  
                mostrarErrores();                          
                if(Utilidades.Singlenton.listaErrores.isEmpty()){fechaHora+= "  No se han encontrado errores durante la ejecución.";}
                else{fechaHora+= "  Se han encontrado "+Utilidades.Singlenton.listaErrores.size()+" error(es) durante la ejecución.";}
                reporteCompilacion.setText(fechaHora);                  
            }            
            // Interpretamos
            try 
            {                
                if(sintactico.raiz!=null){generarGrafica(pathArchivo);}
                interpretar(sintactico.raiz);    
                /*Generar gráfica*/                
                mostrarErrores();                          
                if(Utilidades.Singlenton.listaErrores.isEmpty()){fechaHora+= "  No se han encontrado errores durante la ejecución.";}
                else{fechaHora+= "  Se han encontrado "+Utilidades.Singlenton.listaErrores.size()+" error(es) durante la ejecución.";}
                reporteCompilacion.setText(fechaHora);                  
            } catch (Exception e) 
                
            {
                mostrarErrores();                          
                if(Utilidades.Singlenton.listaErrores.isEmpty()){fechaHora+= "  No se han encontrado errores durante la ejecución.";}
                else{fechaHora+= "  Se han encontrado "+Utilidades.Singlenton.listaErrores.size()+" error(es) durante la ejecución.";}
                reporteCompilacion.setText(fechaHora);                  
            }
        }                 
        //imprimirTokens(lexico.listaLexemas);
        /*mostrarErrores();                          
        if(Utilidades.Singlenton.listaErrores.isEmpty()){fechaHora+= "  No se han encontrado errores durante la ejecución.";}
        else{fechaHora+= "  Se han encontrado "+Utilidades.Singlenton.listaErrores.size()+" error(es) durante la ejecución.";}
        reporteCompilacion.setText(fechaHora);        
        */
    }
    
    public void abrirAST()
    {
        
    }
    
    public void generarGrafica(String pathArchivo)
    {
        scannerReporte lexicoGrafica;
        parserReporte sintacticoGrafica = null;
        try 
        { 
            Utilidades.Singlenton.pilaArchivos.add(pathArchivo);                
            lexicoGrafica=new scannerReporte(new java.io.FileReader(pathArchivo));                                             
            sintacticoGrafica = new parserReporte(lexicoGrafica);                              
            sintacticoGrafica.parse();
            if(sintacticoGrafica.raiz!=null)
            {
                dibujador dib = new dibujador();
                dib.generarGrafica(sintacticoGrafica.raiz);
                /*Ahora lo agregamos al label.*/
                JLabel etiqueta = labelReporte;
                etiqueta.setBackground(Color.BLACK);
                etiqueta.setBounds(0,0,panelReporte.getWidth(),panelReporte.getHeight());
                String ruta = PathActual()+"\\ast.jpg";
                ImageIcon icono =   new ImageIcon(ruta); 
                ImageIcon iconoEscala = new ImageIcon(icono.getImage().getScaledInstance(etiqueta.getHeight(), etiqueta.getWidth(), java.awt.Image.SCALE_DEFAULT));
                etiqueta.setIcon(iconoEscala);                                 
            }            
        } 
        catch (Exception ex) 
        {

            System.out.println(ex.getMessage());  
            mostrarErrores();                          
            if(Utilidades.Singlenton.listaErrores.isEmpty()){fechaHora+= "  No se han encontrado errores durante la ejecución.";}
            else{fechaHora+= "  Se han encontrado "+Utilidades.Singlenton.listaErrores.size()+" error(es) durante la ejecución.";}
            reporteCompilacion.setText(fechaHora);                  
        }         
    }
    
    public void Imprimir(String m)
    {        
        this.textAreaConsola.setText(textAreaConsola.getText() + m);
    }    
    
    public void ImprimirLn(String m)
    {        
        this.textAreaConsola.setText(textAreaConsola.getText() + "\n" + m);
    } 
    
    public void imprimirTokens(ArrayList<lexema> lexemas)
    {
        System.out.println("Id\tLinea\tColumna");
        lexemas.forEach((_item) -> 
        {            
            System.out.println("" + _item.getValor()
                    +"\t"+_item.getTipo()                    
                    +"\t" + _item.getLinea()
                    +"\t"+_item.getColumna()
            );            
        });        
    }
    
    
    // @param entero modo : 1= remplazar todo, 0= remplazar siguiente
    public void remplazar(int modo)
    {
        JPanel actual = (JPanel) contenedorPaneles.getComponent(contenedorPaneles.getSelectedIndex());
        RTextScrollPane scrollActual= (RTextScrollPane) actual.getComponent(0); 
        RSyntaxTextArea textArea = (RSyntaxTextArea)scrollActual.getTextArea();        
        String textoBuscado = textoBusqueda.getText();
        String textoNuevo = textoRemplazar.getText();
        if(textoBuscado.length() == 0 || textoNuevo.length() == 0)
        {
            return;
        }        
        SearchContext contexto = new SearchContext();                              
        contexto.setSearchFor(textoBuscado);  
        contexto.setReplaceWith(textoNuevo);
        contexto.setRegularExpression(true);
        contexto.setSearchForward(true);
        contexto.setWholeWord(false);
        contexto.setMatchCase(true);
        contexto.setRegularExpression(true);
        contexto.setSearchForward(true);              
        boolean encontrado = false;
        if(modo==1)
        {
            encontrado = SearchEngine.replaceAll(textArea, contexto).wasFound();
        }
        if(modo == 0)
        {
            encontrado = SearchEngine.replace(textArea, contexto).wasFound();
        }
        
        if(!encontrado)
        {
            JOptionPane.showMessageDialog(this, "Sin coincidencias encontradas.");
        }        
    }
    public void buscar()
    {
        
        JPanel actual = (JPanel) contenedorPaneles.getComponent(contenedorPaneles.getSelectedIndex());
        RTextScrollPane scrollActual= (RTextScrollPane) actual.getComponent(0); 
        RSyntaxTextArea textArea = (RSyntaxTextArea)scrollActual.getTextArea();        
        String texto = textoBusqueda.getText();
        if(texto.length() == 0)
        {
            return;
        }        
        SearchContext contexto = new SearchContext();                              
        contexto.setSearchFor(texto);        
        contexto.setRegularExpression(true);
        contexto.setSearchForward(true);
        contexto.setWholeWord(false);
        contexto.setMatchCase(true);
        contexto.setRegularExpression(true);
        contexto.setSearchForward(true);              
        
        boolean encontrado = SearchEngine.find(textArea, contexto).wasFound();
        if(!encontrado)
        {
            JOptionPane.showMessageDialog(this, "Sin coincidencias encontradas.");
        }                              
    }
    
    
    MouseListener editorListener= new MouseListener() 
    {

        @Override
        public void mouseReleased(MouseEvent e)
        {
            System.out.println("mouseReleased");
        }

        @Override
        public void mousePressed(MouseEvent e) 
        {        
            System.out.println("mousePressed");
            if(e.getSource() instanceof RTextScrollPane )
            {
                RTextScrollPane scrollActual = (RTextScrollPane)e.getSource();
                System.out.println(scrollActual.getMousePosition().x);
            }            
        }

        @Override
        public void mouseExited(MouseEvent e) {
            System.out.println("mouseExited");
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            System.out.println("mouseEntered");                        
        }

        @Override
        public void mouseClicked(MouseEvent e) 
        {
            System.out.println("mouseClicked");
            if(e.getSource() instanceof RTextScrollPane )
            {
                RTextScrollPane scrollActual = (RTextScrollPane)e.getSource();
                System.out.println("Putas");
            }               
        }
    }; 
    
    
    
    public void iniciarDebuger()
    {
        JPanel panelActual = (JPanel) contenedorPaneles.getComponent(contenedorPaneles.getSelectedIndex()); // Panel Actual
        RTextScrollPane scrollActual= (RTextScrollPane) panelActual.getComponent(0); // Scroll actual.
        Gutter gutter = scrollActual.getGutter(); 
        GutterIconInfo[] puntos = gutter.getBookmarks(); // Array de información de puntos.
        //for(GutterIconInfo point: puntos){Imprimir("GutterIconInfo\t"+point.getMarkedOffset());}
        ArrayList<Integer> breakPoints = new ArrayList(); // Array donde se guardan la líneas de los breakpoints.
        breakPoints.clear();// :v
        String texto = scrollActual.getTextArea().getText().replace("\n", " \n");//
        texto = texto + " ";//         
        String[] lineas = texto.split("\n");                   
        StringTokenizer st = new StringTokenizer(texto,"\n");
        lineas = new String[st.countTokens()];
        int count = 0;
        while (st.hasMoreTokens()) 
        {
            lineas[count] = st.nextToken();
            count ++ ;
        }               
        Integer[] limites = new Integer[lineas.length + 1 ];
        limites[0] = 0;
        int contador = 1;                
        for(String line: lineas)
        {        
            if(contador == 0)
            {
                limites[contador] = line.length() ;
            }
            else
            {
                limites[contador] = line.length() +limites[contador-1];
            }            
            contador++;                       
        }    
        //for(int lim : limites){Imprimir("Inicio Linea\t"+lim);}
        for( GutterIconInfo punto : puntos)
        {
            for(int x = 0 ; x < lineas.length; x++)
            {
                if(punto.getMarkedOffset()==limites[x])
                {
                    breakPoints.add(x);
                    break;
                }
            }            
        }                      
        System.out.println("-----------------");
        for(int point: breakPoints)
        {
            System.out.println("BreakPoint\t"+point);
        }                
    }
    
    public void Imprimir(Object cadena)
    {
        System.out.println(cadena);
    }
    
    public void imprimirConsola(String cadena)
    {        
        this.textAreaConsola.setText( this.textAreaConsola.getText() + "\n" + cadena);
    }
    
    
    public String PathActual(){                
        String path="";
         File miDir = new File (".");
         try {
           //System.out.println (miDir.getCanonicalPath());
           path=miDir.getCanonicalPath();
         }
         catch(Exception e) 
         {
           e.printStackTrace();
         }
         return path+"\\Proyectos";
    } 
    
        public double factorial(double num)
    {
        if(num==0){return 1;}
        else{return num*factorial(num-1);}
    }
    
    
    public double seno(double x, int ajuste)
    {
        double contador=0;
        if( ajuste>= 1 && ajuste<=10)
        {
            Imprimir("El ajuste debe estar entre 1 y 10");
            return -1;
        }
        double valor=0;
        ajuste = ajuste*100;
        while(contador<=ajuste)
        {
            valor = valor + (Math.pow(-1,contador)/(factorial(2*contador+1)))*Math.pow(x, 2*contador);
        }
        return valor;
    }
    
    
   public Color colorFuente(String color)
   {
       color = quitarComillas(color).toLowerCase();       
       Color retorno = Color.WHITE ;
       System.out.println("Buscando color: \t "+color);
       
       if(color.contains("#"))
       {
            //Mensaje("Buscando color: \t "+color,"");           
            //Color colorFodo = new Color(int r, int g, int b, int a);
            //this.scroll.setBackground(colorFondo);
            int r,g,b,a;
            String hr,hg,hb,ha;
            String entrada= color;
            hr = entrada.substring(1,3);
            hg = entrada.substring(3,5);
            hb = entrada.substring(5,7);

            r = hexToDec(hr);
            g = hexToDec(hg);
            b = hexToDec(hb);
            a=0;
            if(r==300 || g ==300 || b==300)
            {
                //filasErrores.addRow(new String[]{"CHTML",String.valueOf(hijoD.getLinea()),String.valueOf(hijoD.getColumna()),"Semantico", hijoD.getValue() + " Valor rgb no valido."});
                String mensaje = color + "Valor rgb no válido.";
                listaErrores.add(new ErrorC(ErrorC.TipoError.SEMANTICO,mensaje, 0,0));                
            }
            else
            {
                //panel.setBackground(new Color(r,g,b));
                retorno = new Color(r,g,b);            
            }        
       }
       else
       {              
            switch(color)
            {
                case "blue":
                    retorno = Color.blue;
                    break;
                case "black":
                    retorno = Color.BLACK;
                    break;
                case "gray":
                    retorno = Color.GRAY;
                    break;
                case "cyan":
                    retorno = Color.CYAN;
                    break;
                case "dark_gray":
                    retorno = Color.DARK_GRAY;
                    break;   
                case "green":
                    retorno = Color.GREEN;
                    break;
                case "light_gray":
                    retorno = Color.LIGHT_GRAY;
                    break;
                case "magenta":
                    retorno = Color.MAGENTA;
                    break;
                case "orange":
                    retorno = Color.ORANGE;
                    break;
                case "pink":
                    retorno = Color.PINK;
                    break;
                case "red":
                    retorno = Color.RED;
                    break;
                case "white":
                    retorno = Color.WHITE;
                    break;
                case "yellow":
                    retorno = Color.YELLOW;
                    break;  
                default:
                    //filasErrores.addRow(new String[]{"CHTML",String.valueOf(raiz.getLinea()),String.valueOf(raiz.getColumna()),"Semantico","Nombre de color no válido."});
                    //Errores(String tipo, int linea, int columna, String valor)
                    String mensaje = color + "Nombre de color no válido.";
                    listaErrores.add(new ErrorC(ErrorC.TipoError.SEMANTICO,mensaje, 0,0));   
                    break;
            }   
       }
        return retorno;
   }    
    public String quitarComillas(String cadena)
    {
        if(cadena!=null)
        {
            if(!cadena.equals(""))
            {
                String inicio = cadena.substring(0, 1);
                if(inicio.equals("\""))
                {
                    return cadena.substring(1, cadena.length()-1);
                }
                return cadena.trim();            
            }
            return cadena.trim();
        }
        return cadena.trim();
    }    

   private static int hexToDec(String hex) {  
       Integer outputDecimal = 0;
        try
        { 
            outputDecimal = Integer.parseInt(hex, 16);
            System.out.print(outputDecimal+"\t D:\t" + hex);
            return outputDecimal;
        }

        catch(NumberFormatException ne)
        {
            return 300;
        }            
    }
   

    
    public void mostrarSimbolos(Hashtable<String, Simbolo> ts)
    {
        DefaultTableModel simbolos = new DefaultTableModel();        
        simbolos.addColumn("Archivo");        
        simbolos.addColumn("Id");
        simbolos.addColumn("Ambito");
        simbolos.addColumn("Rol"); 
        simbolos.addColumn("Posicion");                 
        simbolos.addColumn("Tamaño");                 
        simbolos.addColumn("dimensiones");                 
        simbolos.addColumn("Tipo"); 
        simbolos.addColumn("Valor");
        tabladeSimbolos.setModel(simbolos);        
                
        

        Set<String> claves = ts.keySet();
        int contador = 0;
        for (String clav : claves) {
                Simbolo simb = ts.get(clav);                 
                  simbolos.addRow(new Object[]
                  {raizActual,
                      simb.getId(),                      
                      simb.getRol(),
                      contador,                                            
                      simb.getTipo(),
                      simb.getValor()
                  }
                  );    
                  contador++;                
        }                                          
    }
    
    /*
    * @params ast es una arrayList de instrucciones
    */
    
    public void interpretar(Instruccion r)
    {        
        ArrayList<Nodo> l = new ArrayList<Nodo>();
        l.add(r);
        AST raiz = new AST(l);
        raiz.ejecutar(this);
        //r.ejectuar(new Entorno(new Entorno(null),this));
    }

    public void interpretar(AST r)
    {        
        if(r!=null)
        {
            r.ejecutar(this);
        }        
        //r.ejectuar(new Entorno(new Entorno(null),this));
    }    
    public void prueba()
    {
        String valor = "99.00";
        double decimal = Double.parseDouble(valor);
        int entero = Integer.parseInt(valor);
    }
   public void addIntelgentSense(String valor)
   {
       provider.addCompletion(new BasicCompletion(provider, valor));
   }
   
   private CompletionProvider createCompletionProvider() {

      // A DefaultCompletionProvider is the simplest concrete implementation
      // of CompletionProvider. This provider has no understanding of
      // language semantics. It simply checks the text entered up to the
      // caret position for a match against known completions. This is all
      // that is needed in the majority of cases.
      provider = new DefaultCompletionProvider();

      // Add completions for all Java keywords. A BasicCompletion is just
      // a straightforward word completion.
      provider.addCompletion(new BasicCompletion(provider, "abstract"));
      provider.addCompletion(new BasicCompletion(provider, "assert"));
      provider.addCompletion(new BasicCompletion(provider, "break"));
      provider.addCompletion(new BasicCompletion(provider, "case"));
      // ... etc ...
      provider.addCompletion(new BasicCompletion(provider, "transient"));
      provider.addCompletion(new BasicCompletion(provider, "try"));
      provider.addCompletion(new BasicCompletion(provider, "void"));
      provider.addCompletion(new BasicCompletion(provider, "volatile"));
      provider.addCompletion(new BasicCompletion(provider, "while"));
      provider.addCompletion(new BasicCompletion(provider, "do"));
      provider.addCompletion(new BasicCompletion(provider, "for"));
      provider.addCompletion(new BasicCompletion(provider, "class"));
        provider.addCompletion(new BasicCompletion(provider, "if"));
        provider.addCompletion(new BasicCompletion(provider, "public"));
        provider.addCompletion(new BasicCompletion(provider, "private"));
        provider.addCompletion(new BasicCompletion(provider, "static"));
        provider.addCompletion(new BasicCompletion(provider, "return"));
        provider.addCompletion(new BasicCompletion(provider, "String"));
        provider.addCompletion(new BasicCompletion(provider, "double"));
        provider.addCompletion(new BasicCompletion(provider, "boolean"));
        provider.addCompletion(new BasicCompletion(provider, "char"));
        provider.addCompletion(new BasicCompletion(provider, "new"));
        provider.addCompletion(new BasicCompletion(provider, "toInt"));
        provider.addCompletion(new BasicCompletion(provider, "toString"));
      // Add a couple of "shorthand" completions. These completions don't
      // require the input text to be the same thing as the replacement text.
      provider.addCompletion(new ShorthandCompletion(provider, "sysout",
            "System.out.println(", "System.out.println("));
      provider.addCompletion(new ShorthandCompletion(provider, "syserr",
            "System.err.println(", "System.err.println("));

      return provider;

   }  
   
   public void iniciarDepuracion()
   {
       //Obtenemos break points
       obtenerBreakPoints();       
   }
   public void obtenerBreakPoints()
   {
       //Primero obtenemos el arrayde los break points.
       Utilidades.Singlenton.breakPoints.clear();
       Utilidades.Singlenton.puntos.clear();
       String nombreArchivo = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
       Component cont = contenedorPaneles.getSelectedComponent();
       if(cont instanceof JPanel)
       {
           JPanel panel = (JPanel)cont;
           RTextScrollPane scroll;
           Component componentes[] = panel.getComponents();
           if(componentes[0] instanceof RTextScrollPane)
           {
               scroll = (RTextScrollPane)componentes[0];                 
                Gutter gutter = scroll.getGutter();
                GutterIconInfo puntos[] =  gutter.getBookmarks();
                Utilidades.Singlenton.breakPoints = new ArrayList<>();                
                /*Componente text area*/
                Component itemScroll[] = scroll.getComponents();
                for(Component com : itemScroll)
                {
                    //Component xxx[] = com.getComponents();                    
                }
                
                for(GutterIconInfo punto : puntos)
                {                    
                   try 
                   {
                       int linea =scroll.getTextArea().getLineOfOffset(punto.getMarkedOffset())+1;
                       Utilidades.Singlenton.breakPoints.add(linea);
                       ImprimirLn(linea+"");
                   } 
                   catch (BadLocationException ex) 
                   {
                       Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
                   }                                        
                }
           }           
       }
                 
   }
   public int getVelocidad()
   {
       return slideVelocidad.getValue();
   }
   
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abrirCarpeta;
    private javax.swing.JTree arbolDirectorio;
    private javax.swing.JButton botonBuscar;
    private javax.swing.JButton botonCompilar;
    private javax.swing.JButton botonCompilar1;
    private javax.swing.JButton botonRemplazar;
    private javax.swing.JButton botonRemplazar1;
    private javax.swing.JTabbedPane contenedorPaneles;
    private javax.swing.JMenuItem guardarComo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelReporte;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuEjecucion;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JPanel panelDirectorio;
    private javax.swing.JPanel panelEdicion;
    private javax.swing.JPanel panelEditor;
    private javax.swing.JPanel panelReporte;
    private javax.swing.JTextArea reporteCompilacion;
    private javax.swing.JSlider slideVelocidad;
    private javax.swing.JTable tablaErrores;
    private javax.swing.JTable tabladeSimbolos;
    private javax.swing.JTextArea textAreaConsola;
    private javax.swing.JTextField textoBusqueda;
    private javax.swing.JTextField textoRemplazar;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() 
    {        
        compilar();
    }
    /*método para iniciar el hilo*/
    public void iniciarHilo(){
        hilo=new Thread(this);
        hilo.start();
        hiloIniciado=true;
    }
    /*método para parar el hilo*/
    public void pararHIlo(boolean estado){
        seguirHilo=estado;
    }   
    
    public boolean resaltarLinea(int linea) 
    {
       //Primero obtenemos el arrayde los break points.
       String nombreArchivo = contenedorPaneles.getTitleAt(contenedorPaneles.getSelectedIndex());
       RTextArea areaActual = tablaEditores.get(nombreArchivo);       
       //areaActual.setLocation(punto.getMarkedOffset);
       int i= 0;
       /*Limpiamos todos los resaltados*/
       /*for(Integer p :Utilidades.Singlenton.breakPoints)
       {
           areaActual.addLineHighlight(linea -1 , Color.WHITE);           
       }*/
       for(Integer p :Utilidades.Singlenton.breakPoints)
       {        
           if(p==linea)
           {
               break;
           }
           i++;
       }   
       if(i<Utilidades.Singlenton.breakPoints.size())
       {
           try {
               areaActual.addLineHighlight(linea -1 , Color.RED);
           } catch (BadLocationException ex) {
               Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
           }
           return true;
       }
       return false;
       
    }
}
